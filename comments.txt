import random
from tkinter import *
from PIL import Image, ImageTk   -nujen dlya vivoda izobrajeniy

WIDTH = 1000
HEIGHT = 650
BODYSIZE = 50  -razmer odnoy kletochki (zmei ili yabloka)
STARTDELAY = 500  -nachalniy interval dlya taimera *(taimer chtob sozdavat animaciyu)
MINDELAY = 100
STEPDELAY = 20
LENGTH = 3  -nachalnaya dlina smeyki

countBodyW = WIDTH / BODYSIZE   -skolko vsego kletok po shirine
countBodyH = HEIGHT / BODYSIZE   -skolko vsego kletok po visote

class Snake(Canvas):   -klass kanva poneli docherni ot canvasa

    - Peremennie
    x = False
    y = False
    headImage = False
    head = False
    body = False
    apple = False
    delay = 0
    direction = "Right"
    directiontemp = "Right"
    loss = False

    def __init__(self): -konstruktor inicaliziruem i vizivaem roditelskiy konstruktor
        Canvas.__init__(self, width=WIDTH, height=HEIGHT, background="black", highlightthickness=0)
        self.focus_get()  -chtob najimali knopki i oni obrabativalis
        self.bind_all("<Key>", self.onKeyPressed) -veshaem binding i ukazivaem vse klavishi chtob obrabativalis
        self.loadResources()  -zagrujaem resursi (kartinki)
        self.beginplay() -pri zapuske chtob nachinalas igra
        self.pack()

    def loadResources(self):      -funkciya zagrujaem i ukazivaem put
        self.headImage = Image.open("images/head.png")

        -Sozdayom izobrajeniya so soystvami resize chtob izmenit razmer na ukazaniiy vishe,sglajivaniya 

        self.head = ImageTk.PhotoImage(self.headImage.resize((BODYSIZE, BODYSIZE), Image.ANTIALIAS))
        self.body = ImageTk.PhotoImage(Image.open("images/body.png").resize((BODYSIZE, BODYSIZE), Image.ANTIALIAS))
        self.apple = ImageTk.PhotoImage(Image.open("images/apple.png").resize((BODYSIZE, BODYSIZE), Image.ANTIALIAS))

    def beginplay(self):  -metod vizivaetsya pri nachale igri
        self.delay = STARTDELAY
        self.direction = "Right" -po umolchaniyu dvijenie zmeyki
        self.directiontemp = "Right"
        self.loss = False -proigral polzovatel ili net

        self.x = [0] * int(countBodyW)
        self.y = [0] * int(countBodyH)

        self.delete(ALL)   -ochishaem vsjo chto do etogo narisovali (igru)
        self.spawnActors()  -spamnim vse obyekti na igrovom pole
        self.after(self.delay, self.timer) -timer dlya animacii (perviy arg zaderjka vtoroy visov funkcii)

    def spawnActors(self):  -spamni vse obyekti na igrovom pole

        self.spawnApple()   -chtob poyavilos yabloko

        self.x[0] = int(countBodyW / 2) * BODYSIZE  -sozdayom golovu v seredine polya po x i po y
        self.y[0] = int(countBodyH / 2) * BODYSIZE
        for i in range(1, LENGTH):   -sozdayom telo zmeyki s 1 potomuchto 0 eto golova
            self.x[i] = self.x[0] - BODYSIZE * i
            self.y[i] = self.y[0]
        self.create_image(self.x[0], self.y[0], image=self.head, anchor="nw", tag="head") -sozdayom izobrajenie
        for i in range(LENGTH - 1, 0, -1):   -vivodim xvost
            self.create_image(self.x[i], self.y[i], image=self.body, anchor="nw", tag="body")

    def spawnApple(self):  -Vivod yabloka
        apple = self.find_withtag("apple")
        if apple:   -esli yabloko naydeno to udalyaem ego
            self.delete(apple[0])
        rx = random.randint(0, countBodyW - 1) - poluchaem sluchaynuyu tochku x
        ry = random.randint(0, countBodyH - 1) - poluchaem sluchaynuyu tochku y
        self.create_image(rx * BODYSIZE, ry * BODYSIZE, anchor="nw", image=self.apple, tag="apple") -vivodim snova yabloko

    def checkApple(self):
        apple = self.find_withtag("apple")[0] -opredelyaem gde naxoditsya yabloko
        head = self.find_withtag("head") -opredelyaem gde naxoditsya golova
        body = self.find_withtag("body")[-1]  -naxodim samiy posledniy ellement zmei
        x1, y1, x2, y2 = self.bbox(head)  -opredelyaem peresekliz li kolizii golovi i yabloka
        overlaps = self.find_overlapping(x1, y1, x2, y2)
        for actor in overlaps:    -pereberaem vsyo chto popalo v dannor peresechenie
            if actor == apple:   -esli v koliziyu golovi popalo yabloko udalyaem apple(v funkcii spawnApple)
                tempx, tempy = self.coords(body)  -soxranyaem koordinati chtob sozdat xvost zmei (resuetsya gde posledniy ellemnt)
                self.spawnApple() -udalyaem sozdayom novoe yabloko (delaetsya v funnkciii spawnApple)
                self.create_image(tempx, tempy, image=self.body, anchor="nw", tag="body") -na meste koordinat yabloka sozdayom xvost delo zmeyi
                if self.delay > MINDELAY: -chtob kajdiy raz kak syedaem yabloko zaderjka dvijeniya umenshalas
                    self.delay -= STEPDELAY

    def checkCollisions(self):  -funkciya proverki stalknoveniy
        head = self.find_withtag("head") -naxodim golovu
        body = self.find_withtag("body")   -naxodim telo
        x1, y1, x2, y2 = self.bbox(head)   -smotrim tolko po golove 
        overlaps = self.find_overlapping(x1, y1, x2, y2) -smotrim s chem peresekaetsya golova
        for b in body:   -pereberaem vse elementi tela
            for actor in overlaps: -smotrim s chem pereseklas golova zmeyi
                if actor == b: -esli actor eto telo zmei
                    self.loss = True  -togda proigrish loss stanovitsya true

          -proveryaem predeli ekrana 
        if x1 < 0:
            self.loss = True   -uxodit vlevuyu oblast ekrana 
        if x2 > WIDTH:   
            self.loss = True   -uxodit vpravuyu oblast ekrana  
        if y1 < 0:
            self.loss = True   -uxodit zmeya vverx
        if y2 > HEIGHT:
            self.loss = True   -uxodit zmeyu v niz 

    def onKeyPressed(self, event):   -najatie knopok chto knopka kuda idti *(obrabodka klavish)
        key = event.keysym
        if key == "Left" and self.direction != "Right":
            self.directiontemp = key
        elif key == "Right" and self.direction != "Left":
            self.directiontemp = key
        elif key == "Up" and self.direction != "Down":
            self.directiontemp = key
        elif key == "Down" and self.direction != "Up":
            self.directiontemp = key
        elif key == "space" and self.loss:  -esli proigrish i najimaem probel 
            self.beginplay()             -vizivaetsya funkciya beginplay nachinaem igru zanovo

    def updateDirection(self):  -funkciya srabativaet kogda vizivaetsya taimer
        self.direction = self.directiontemp -primenyaem novoe znachenie kak postoyannoe
        head = self.find_withtag("head") -naxodim golovu s pomoshju tag
        headx, heady = self.coords(head) -vitaeskivaem iz golovi koordinati x i y
        self.delete(head) -posle tago kak uznali koordinati udalyaem golovu
        if self.direction == "Left":  -esli napravlenie vlevo 
            menyaem izobrajenie i s pomoshju transpose razvorachivaem izob. v drugou storonu (kak zerkalnoe)
            self.head = ImageTk.PhotoImage(self.headImage.transpose(Image.FLIP_LEFT_RIGHT).resize((BODYSIZE, BODYSIZE), Image.ANTIALIAS))
        else:
            rotates = {"Right": 0, "Up": 90, "Down": - 90} -esli zmeya dvijetsya vverx vniz ili vpravo
            togda prosto povarachivaem izob. esli vpravo na 0 gradusov, esli vverx na 90 gradusov i esli vniz na -90 gradusov
            self.head = ImageTk.PhotoImage(self.headImage.rotate(rotates[self.direction]).resize((BODYSIZE, BODYSIZE), Image.ANTIALIAS))

        self.create_image(headx, heady, image=self.head, anchor="nw", tag="head")  -sozdayom novuyu golovu

    def timer(self):   -Timer dlya animacii
        self.checkCollisions() -proveryaem na stolknoveniya zmeyu
        if not self.loss:  -prodoljaem esli polyovatel ne proigral
            self.checkApple()  -vizivaem funkciyu chtob pribavlyalsya xvost
            self.updateDirection() -obnovlyaem napravleniya dvijeniya zmeyki
            self.moveSnake() -sdvigaem zmeyku na odnu poziciyu
            self.after(self.delay, self.timer) -vizivaem metod snova kak v beginplay ato animaciya  ostanovitsya
        else:
            self.gameOver()  -eli proigrish vizivaem funkciyu gameOver 

    def moveSnake(self):   
        head = self.find_withtag("head") -naxodim , poluchaem izobrajenita golovi
        body = self.find_withtag("body") -naxodim , poluchaem izobrajenita tela
        items = body + head
        for i in range(len(items) - 1):  -perebiraem vse elementi krome poslednego
            currentxy = self.coords(items[i])  - koordinati tekushego elementa
            nextxy = self.coords(items[i + 1]) -novie koordinati sledushego elementa 
            self.move(items[i], nextxy[0] - currentxy[0], nextxy[1] - currentxy[1]) -vizivaem fun. ukazivaem kaky el dvigat i na skolko sdvinut po x i y
        if self.direction == "Left":  - dvijenie golovi vlevo
            self.move(head, -BODYSIZE, 0) -dvigaem tolko po X na -BODYSIZE po Yku 0
        elif self.direction == "Right":  - Dvijenie golovi vpravo 
            self.move(head, BODYSIZE, 0)  -dvigaem tolko po X uvelichivaem na BODYSIZE po yku 0
        elif self.direction == "Up":  - dvigaem golovu naverx
            self.move(head, 0, -BODYSIZE)  -dvigaem tolko po Y na -BODYSIZE x ostayotska 0
        elif self.direction == "Down":  -dvigaem golovu vniz
            self.move(head, 0, BODYSIZE)  -tolko po Y uvelichivaem na BODYSIZE x ostayotsya 0

    def gameOver(self):
        body = self.find_withtag("body")  -ishem vse elementi tela chtob pokazat kakaya bila dlina zmei
        self.delete(ALL)  -udalyaem vse chto est na canve 
        -pechataem teks po centru 
        self.create_text(self.winfo_width() / 2, self.winfo_height() / 2 - 60, text="Game Over!", fill="white", font="Tahoma 40", tag="text")
        self.create_text(self.winfo_width() / 2, self.winfo_height() / 2, text="Snake's length: " + str(len(body) + 1), fill="white", font="Tahoma 40", tag="text")
        self.create_text(self.winfo_width() / 2, self.winfo_height() / 2 + 60, text="Please enter Space for new game", fill="white", font="Tahoma 40", tag="text")


root = Tk()    -sozdayom okno
root.title("Snake")   - nazvanie okna

root.board = Snake()   -pomeshaem v okno nashu igru

root.resizable(False, False) -chtob ne izmenyat razmeri

ws = root.winfo_screenwidth()   -poluchaem shirinu okna u polzovatelya
hs = root.winfo_screenheight()  -poluchaem visotu okna u polzovatelya

x = int(ws / 2 - WIDTH / 2)    -opredelyaem kordinati verxnego levogo ugla
y = int(hs / 2 - HEIGHT / 2)   -kordinati pravogo verxnego ugla

root.geometry("+{0}+{1}".format(x, y))  - vivodim

root.mainloop()    -zapuskaem okno